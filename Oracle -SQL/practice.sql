DROP TABLE USERS;
CREATE TABLE USERS (
USER_ID INT, 
FIRST_NAME VARCHAR(255), 
LAST_NAME VARCHAR(255), 
DATE_CREATED DATE, 
EMAIL VARCHAR(255));
TRUNCATE TABLE USERS;
INSERT ALL
INTO USERS (USER_ID, FIRST_NAME, LAST_NAME, DATE_CREATED, EMAIL) VALUES ('1', 'A','Scott', TO_DATE('2019-02-01','YYYY-MM-DD'), 'a@mail.com')
INTO USERS (USER_ID, FIRST_NAME, LAST_NAME, DATE_CREATED, EMAIL) VALUES ('2', 'B','BB', TO_DATE('2019-03-01','YYYY-MM-DD'), 'b@mail.com')
INTO USERS (USER_ID, FIRST_NAME, LAST_NAME, DATE_CREATED, EMAIL) VALUES ('3', 'C','CC', TO_DATE('2019-04-01','YYYY-MM-DD'), 'c@mail.com')
INTO USERS (USER_ID, FIRST_NAME, LAST_NAME, DATE_CREATED, EMAIL) VALUES ('4', 'D','DD', TO_DATE('2019-05-01','YYYY-MM-DD'), 'd@mail.com')
INTO USERS (USER_ID, FIRST_NAME, LAST_NAME, DATE_CREATED, EMAIL) VALUES ('5', 'E','EE', TO_DATE('2019-03-04','YYYY-MM-DD'), 'e@mail.com')
INTO USERS (USER_ID, FIRST_NAME, LAST_NAME, DATE_CREATED, EMAIL) VALUES ('6', 'F','FF', TO_DATE('2019-03-05','YYYY-MM-DD'), 'f@mail.com')
SELECT * FROM DUAL;
SELECT * FROM USERS;


DROP TABLE ORDERS;
CREATE TABLE ORDERS (
ORDER_ID INT, 
USER_ID INT, 
DATE_CREATED DATE, 
ORDER_VALUE FLOAT, 
CITY_ID INT);
TRUNCATE TABLE ORDERS;
INSERT ALL
INTO ORDERS (ORDER_ID, USER_ID, DATE_CREATED, ORDER_VALUE, CITY_ID) VALUES ('1', '1', TO_DATE('2019-10-06','YYYY-MM-DD'), '14.3', '1')
INTO ORDERS (ORDER_ID, USER_ID, DATE_CREATED, ORDER_VALUE, CITY_ID) VALUES ('2', '3', TO_DATE('2019-10-05','YYYY-MM-DD'), '31.3', '2')
INTO ORDERS (ORDER_ID, USER_ID, DATE_CREATED, ORDER_VALUE, CITY_ID) VALUES ('3', '4', TO_DATE('2019-10-05','YYYY-MM-DD'), '15.3', '3')
INTO ORDERS (ORDER_ID, USER_ID, DATE_CREATED, ORDER_VALUE, CITY_ID) VALUES ('4', '2', TO_DATE('2019-03-03','YYYY-MM-DD'), '41.3', '1')
INTO ORDERS (ORDER_ID, USER_ID, DATE_CREATED, ORDER_VALUE, CITY_ID) VALUES ('5', '1', TO_DATE('2019-02-02','YYYY-MM-DD'), '11.3', '1')
INTO ORDERS (ORDER_ID, USER_ID, DATE_CREATED, ORDER_VALUE, CITY_ID) VALUES ('6', '1', TO_DATE('2019-02-04','YYYY-MM-DD'), '22.3', '1')
SELECT * FROM DUAL;
SELECT * FROM ORDERS;

DROP TABLE CITY;
CREATE TABLE CITY (
CITY_ID INT, 
CITY_NAME VARCHAR(255), 
COUNTRY_ID INT);
INSERT ALL
INTO CITY (CITY_ID, CITY_NAME, COUNTRY_ID) VALUES ('1', 'LDN', '1')
INTO CITY (CITY_ID, CITY_NAME, COUNTRY_ID) VALUES ('2', 'AAA', '2')
INTO CITY (CITY_ID, CITY_NAME, COUNTRY_ID) VALUES ('3', 'BBB', '2')
SELECT * FROM DUAL;
SELECT * FROM CITY;

DROP TABLE COUNTRY;
CREATE TABLE COUNTRY (
COUNTRY_ID INT, 
COUNTRY_NAME VARCHAR(255), 
CURRENCY_CODE VARCHAR(255));
INSERT ALL
INTO COUNTRY (COUNTRY_ID, COUNTRY_NAME, CURRENCY_CODE) VALUES ('1', 'UK', 'POUND')
INTO COUNTRY (COUNTRY_ID, COUNTRY_NAME, CURRENCY_CODE) VALUES ('2', 'KOR', 'WON')
SELECT * FROM DUAL;
SELECT * FROM COUNTRY;

--1. Count the number of customers, that placed at least 1 order, whose last_name is ¡°Scott¡± 
-- maybe they want to understand how many Scott family orders
SELECT * --COUNT(1)
FROM USERS U
WHERE U.LAST_NAME = 'Scott'
AND EXISTS (
           SELECT 1
           FROM ORDERS O
           WHERE O.USER_ID = U.USER_ID
          );

 
--2. Count the number of different cities where at least 1 order has been placed yesterday
SELECT *--COUNT(1)
FROM CITY C
WHERE EXISTS (
            SELECT 1
            FROM ORDERS O
            WHERE O.CITY_ID = C.CITY_ID
            AND DATE_CREATED BETWEEN TRUNC(SYSDATE)-1 AND TRUNC(SYSDATE)
          );


--3. Find the weekly order count for the city of Geneva for the last 8 weeks, and also the cumulative total
SELECT TRUNC(O.DATE_CREATED, 'dy') AS WEEK_START
     , COUNT(1) AS ORDER_COUNT
     , SUM(COUNT(1)) OVER (-- !!! SHOULD HAVE SUM(COUNT(1)) !!!!
     					   -- !!! PARTITION BY TRUNC(O.DATE_CREATED, 'dy') SHOULD HAVE DELETED THIS !!!
                          ORDER BY TRUNC(O.DATE_CREATED, 'dy')
                          ) AS CUML_ORDER_COUNT
  FROM ORDERS O
     , CITY   C
 WHERE O.CITY_ID = C.CITY_ID
 AND O.DATE_CREATED >= TRUNC(SYSDATE, 'dy') - 7*8
 --AND C.CITY_NAME = 'Geneva' -- !!! should have added !!!
 GROUP BY TRUNC(O.DATE_CREATED, 'dy');


--REFERENCE: M8_Game Play Analysis III
--BUT THERE IS NO PARTITION BY BECAUSE I ALREADY GROUP BY DATE_CREATED
SELECT TRUNC(O.DATE_CREATED, 'dy'),
SUM(COUNT(1)) OVER (ORDER BY TRUNC(O.DATE_CREATED, 'dy')
                          ) AS CUML_ORDER_COUNT
FROM ORDERS O
 GROUP BY TRUNC(O.DATE_CREATED, 'dy');
                          
--4. Find the distribution of first order values per user in the UK, 
--using a bin width of GBP 10 and an order value range of GBP 0 - GBP 50. 
--You can not assume that order ID field is ordered logically or sequentially

--"first order values" per user in UK
SELECT ORDER_VALUE_BUCKET
, COUNT(USER_ID) ORDER_COUNT
FROM
(	
	SELECT U.USER_ID
		 , O.DATE_CREATED
		 , FLOOR(O.ORDER_VALUE/10)*10 ORDER_VALUE_BUCKET
		 , RANK() OVER (PARTITION BY U.USER_ID ORDER BY O.DATE_CREATED) RNK_DATE
	     FROM USERS   U
	        , ORDERS  O
	        , CITY    C1
	        , COUNTRY C2
	    WHERE  U.USER_ID      =  O.USER_ID
	      AND  O.CITY_ID      = C1.CITY_ID
	      AND C1.COUNTRY_ID   = C2.COUNTRY_ID
	      AND C2.COUNTRY_NAME = 'UK'
	      AND  O.ORDER_VALUE  BETWEEN 0 AND 50
)
WHERE RNK_DATE=1 --first order
GROUP BY ORDER_VALUE_BUCKET
ORDER BY ORDER_COUNT;
     
     
-- misunderstood the question
SELECT A.ORDER_VALUE_BUCKET
     , COUNT(1) AS ORDER_COUNT
FROM 
(
	   SELECT U.USER_ID
	   		, FLOOR(ORDER_VALUE/10)*10 AS ORDER_VALUE_BUCKET --bin width of GBP 10
	     FROM USERS   U
	        , ORDERS  O
	        , CITY    C1
	        , COUNTRY C2
	    WHERE  U.USER_ID      =  O.USER_ID
	      AND  O.CITY_ID      = C1.CITY_ID
	      AND C1.COUNTRY_ID   = C2.COUNTRY_ID
	      AND C2.COUNTRY_NAME = 'UK'
	      AND  O.ORDER_VALUE  BETWEEN 0 AND 50
) A
GROUP BY A.ORDER_VALUE_BUCKET
ORDER BY ORDER_VALUE_BUCKET; -- !!! would have been better !!!
